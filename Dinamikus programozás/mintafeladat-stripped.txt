

                                                  Optimális pézváltás
   Adott n darab pénz; {p1 , . . . , pn } és egy kifizetendő E összeg. A lehető legkevesebb pénz összegeként
akarjuk kifizetni (felváltani) az E összeget. A pénzek tetszőleges pozı́tı́v egész szám értékűek lehetnek, nem
csak a szokásos 1,2,5,10, stb.

 Feladat
Ijunk olyan programot, amely kiszámı́tja, hogy legkevesebb hány darab pénzzel lehet kifizetni az E összeget, és
meg is ad egy felváltást!

 Bemenet
A standard bemenet első sora két egész számot tartalmaz, a pénzek n (1 ≤ n ≤ 300) számát és a felváltandó
E (1 ≤ E ≤ 10 000) összeget. A második sor pontosan n pozitı́v egész számot tartalmat egy-egy szóközzel
elválasztva, a felváltáshoz használható pénzek értékeit. Egy pénz csak egyszer szerepelhet a felváltásban.

 Kimenet
A standard kimenet első sora azt a legkisebb m számot tartalmazza, ahány darab pénzzel kifizethető az E összeg.
A második sor tartalmazza az optimális kifizetésben szereplő pénzek sorszámait egy-egy szóközzel elválasztva,
tetszőleges sorrendben. Több megoldás esetén bárnelyik megadható.
Ha az E összeget nem lehet kifizetni, akkor az első és egyetlen sor a -1 számot tartalmazza.

 Példa
 Bemenet                                                           Kimenet
 6 8                                                               2
 1 1 4 4 5 1 1                                                     3 4



 Korlátok
Időlimit: 0.1 mp.
Memórilimit: 32 MiB
Pontozás: a tesztesetek 40%-ában n < 1000


                                                         Megoldás


 1. lépés: Az optimális megoldás szerkezetének elemzése
Tegyük fel, hogy
                                             E = pi1 + . . . + pik , i1 < . . . < ik
egy optimális megoldása a feladatnak. Ekkor

                                                 E − pik = pi1 + . . . + pik−1

optimális megoldása lesz annak a feladatnak, amelynek bemenete a felváltandó E − pik érték, és a felváltáshoz
legfeljebb a első ik −1 (p1 , . . . , pik −1 ) pénzeket használhatjuk. Ugyanis, ha lenne kevesebb pénzből álló felváltása
E − pik -nak, akkor E-nek is lenne k-nál kevesebb pénzből álló felváltása.




                                                           1 . oldal


 2. lépés: Részproblémkra és összetevőkre bontás
Minden (X, i) (1 ≤ X ≤ E, 1 ≤ i ≤ n) számpárra vegyük azt a részproblémát, hogy legkevesebb hány pénz
összegeként lehet az X értéket előállı́tani legfeljebb az első i {p1 , . . . , pi } pénz felhasználásával. Ha nincs
megoldás, akkor legyen ez az érték n+1. Jelölje az (X, i) részprobléma optimális megoldásának értékét Opt(X, i).
Definiáljuk az optimális megoldás értékét X = 0-ra és i = 0-ra is, azaz legyen Opt(X, 0) = n+1 és Opt(0, i) = 0.

 3. lépés: Részproblémák optimális megoldásának kifejezése (rekurzı́van) az össze-
tevők optimális megoldásaiból
Opt(X, i)-re az alábbi rekurzı́v összefüggés ı́rható fel.

                           
                           
                            ∞                                           ha                  i=0∧X >0
                             0                                           ha                  X=0
                           
               Opt(X, i) =                                                                                                (1)
                           
                            Opt(X, i − 1)                               ha                  X < pi
                             min(Opt(X, i − 1), 1 + Opt(X − pi , i − 1)) ha                  X ≥ pi
                           

A kindulási probléma megoldása Opt(E, n).

 4. lépés: Részproblémák optimális megoldásának kiszámı́tása alulról-felfelé halad-
va, táblázatkitöltéssel


                                    N




                                     i                                    ?

                                   i-1                 !                  !




                                    1
                                         1           X-P[i]               X            E

                                         1. ábra. Az optimális pénzválzás táblázata


    Az (X, i) részprobkéma összetevői, azaz azok a részproblémák, amelyektől függhet: (X, i − 1) és X − pi , i − 1.
Tároljuk az (X, i) részprobléma megoldását (Opt(X, i) érékét) a táblázat (X, i) koordinátájú elemében. Ekkor
a részproblémák számı́tási sorrendje, azaz a táblázatkitöltés sorrendje soronként alulról felfelé, balról-jobbra.

 5. lépés: Egy optimális megoldás előállı́tása a 4. lépésben kiszámı́tott (és tárolt)
információkból
Legyen i a legkisebb olyan index, amelyre Opt(E, i) = Opt(E, n). Tehát E előállı́tható az első i pénz fel-
használásával Opt(E, n) darab pénzzel, de az első i − 1 pénzzel nem. Tehát az optimális megoldásban szerepel
az i-edik pénz. Válaszzuk be a megoldásba, majd folytassuk az előállı́tást az (E − pi , i − 1) részproblémára.




                                                              2 . oldal


                                   Megvalósı́tás C++ nyelven

 1   # include <iostream >
 2   using namespace std;
 3
 4   int main (){
 5       int n,E;
 6       cin >>n>>E;
 7       int P[n+1];
 8       for(int i=1;i <=n;i++)
 9           cin >>P[i];
10       int Opt[E+1][n+1] ;
11       for (int x=1;x <=E; x++) Opt[x ][0]= n+1;     // 0. sor ki toltese
12       for (int i=0;i <=n; i++) Opt [0][i]=0;        // 0. oszlop ki toltese
13       for (int i=1; i <=n; i++){
14           for (int x=1; x <=E; x++){
15               Opt[x][i]= Opt[x][i -1];
16               if (P[i]<=x && Opt[x][i]>Opt[x-P[i]][i -1]+1)
17                   Opt[x][i]= Opt[x-P[i]][i -1]+1;
18           }
19       }
20   // egy megoldas eloallitasa visszafejtessel
21       if(Opt[E][n]<=n){
22           int S[n+1];
23           int m=0;
24           int x=E; int i=n;
25           do{
26               while (i >1 && Opt[x][i]== Opt[x][i -1]) i--;
27               S[++m]=i ;
28               x -=P[i - -];
29           }while (x >0);
30           cout <<m<<endl;
31           for(int i=1;i<m;i++)
32               cout <<S[i]<<" ";
33           cout <<S[m]<<endl;
34       }else{
35           cout <<-1<< endl;
36       }
37    return 0;
38    }




                                             3 . oldal

